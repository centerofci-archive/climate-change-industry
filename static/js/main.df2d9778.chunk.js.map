{"version":3,"sources":["utils.js","constants.js","components/Icon/Icon.jsx","components/Network/NetworkSearch.jsx","components/CircleText.jsx","components/Network/NetworkBubbles.jsx","components/Network/NetworkFilters.jsx","components/Network/NetworkList.jsx","components/Network/NetworkTooltip.jsx","components/Network/StatusPill.jsx","components/Network/NetworkModal.jsx","group-options.js","components/Network/Network.jsx","components/App.js","index.js"],"names":["move","x","y","arguments","length","undefined","isAttr","transform","concat","runningId","getUniqueId","flatten","arr","reduce","a","b","Object","toConsumableArray","getPointFromAngleAndDistance","angle","distance","Math","cos","PI","sin","getAngleFromPoints","p1","p2","atan2","keepBetween","value","min","max","toTitleCase","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","combineChartDimensions","dimensions","parsedDimensions","objectSpread","marginTop","marginRight","marginBottom","marginLeft","boundedHeight","height","boundedWidth","width","fromPairs","res","forEach","d","getUrlParams","parts","window","location","search","slice","split","params","part","_part$split","_part$split2","slicedToArray","key","decodeURIComponent","paramsObjectToString","obj","keys","values","map","i","encodeURIComponent","join","filter","useQueryParams","_useState5","useState","_useState6","localParams","setLocalParams","currentParams","useRef","useEffect","current","setParams","newParams","newUrl","protocol","host","pathname","history","pushState","path","types","getContributionArea","Set","sort","data","type","rawData","mainContributionArea","colors","typeColors","contributionAreas","contributionAreaColorsList","contributionAreaColors","contributionArea","contributionAreaColorCombos","handleCombo","areaNames","slug","push","otherContributionArea","statusColors","Active","fieldLabels","Entity Type","typeShapes","Interventions","react_default","createElement","Investments","Actors","cx","cy","r","Organizations","style","Regulations","sizes","xs","s","m","l","xl","Icon","_ref","name","_ref$size","size","_ref$direction","direction","className","props","objectWithoutProperties","dimension","assign","viewBox","iconPaths","arrow","controls","info","pause","Fragment","play","refresh","NetworkSearch","searchTerm","setSearchTerm","_useState","_useState2","searchTermLocal","setSearchTermLocal","_useState3","_useState4","isOpen","setIsOpen","allItems","useMemo","debouncedSearchTerm","delay","_useState7","_useState8","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","didMount","setDidMount","uniqueStringsPerField","fields","field","items","collection","func","object","create","item","countBy","fieldToAccessorMap","searchTermLocalLower","filteredStringsPerField","includes","onKeydown","e","addEventListener","removeEventListener","onChange","newSearchTerm","target","placeholder","onFocus","components_Icon_Icon","onClick","CircleText","_ref$r","_ref$rotate","rotate","children","id","fill","pointerEvents","textAnchor","href","startOffset","NetworkBubbles","groupType","groupMeta","activeFilters","onFocusItem","focusedItem","hoveredItem","onHoverItem","focusedNode","setFocusedNodeId","_useChartDimensions","passedSettings","ref","changeWidth","changeHeight","element","resizeObserver","ResizeObserver","entries","Array","isArray","entry","contentRect","observe","unobserve","newSettings","useChartDimensions","_useChartDimensions2","dms","timeout","simulationClusters","simulationClustersData","simulation","simulationData","tickIteration","groups","links","cachedGroupPositions","forceUpdate","setValue","useForceUpdate","clusterByKey","getClusterName","getSize","baseCircleSize","_useMemo","clusters","clusterName","group","count","area","sqrt","numberOfGroups","groupPositions","_","forceSimulation","force","forceX","strength","forceY","forceCollide","stop","tick","clusterPositions","_ref2","getClusterPosition","positions","avg","linkKeys","initialLinks","_ref3","_ref4","tableName","typeOfLink","targetId","find","source","index","nodes","isMain","link","getId","getMatches","investments","startsWith","has","_objectSpread2","cachedPosition","clusterPosition","matchTypes","matches","getMatchTypes","color","getColor","numberOfLinks","defineProperty","node","linkedNodeIds","newFocusedNode","matchingLinks","matchingIds","nextLevelMatchingLinks","nextLevelMatchingIds","getDistanceFromFocusedNode","isAttachedToFocusedNode","forceLink","iterations","alphaMin","alpha","on","onTick","groupBubbles","_ref5","_ref5$items","position","points","hull","polygonHull","top","apply","secondaryNodesOnNodeRunningCount","spiralPositions","linkedNodes","polygonCentroid","Number","isNaN","linkedId","spiralPosition","updateTooltip","getLinkPath","_ref6","reverseAngle","startDiff","targetDiff","reverse","getItemOpacity","label","isFinite","isInHoveredPointNetwork","_ref7","filterValue","getFilterFromItem","stopColor","offset","_ref8","refX","refY","markerWidth","markerHeight","orient","baseFrequency","result","numOctaves","in","in2","scale","xChannelSelector","yChannelSelector","_ref9","strokeWidth","markerStart","opacity","onMouseEnter","onMouseLeave","components_CircleText","len","truncate","floor","_ref10","NetworkFilters","filters","onUpdateFilters","parsedFilters","state","activeFilterOfType","getFilterState","otherActiveFilters","newFilters","onClickItem","--override-color","NetworkList","setActiveFilters","isItemActive","onSetFilter","getFilterValue","_useMemo2","actors","organizations","isSelected","NetworkTooltip","isFocused","format","StatusPill","status","--status-color","background","NetworkModal","_ref$info","onClose","components_Network_StatusPill","rel","amountSizeScale","scaleLog","domain","range","clamp","groupOptions","pluralNoun","accessor","clusterBy","indexOf","groupOptionsById","Network","onChangeState","areFiltersShowing","setAreFiltersShowing","isAboutShowing","setIsAboutShowing","useCallback","newItem","newTerm","onCloseFocusedItem","relationships","directions","about","dangerouslySetInnerHTML","__html","components_Network_NetworkList","components_Network_NetworkSearch","components_Network_NetworkFilters","components_Network_NetworkBubbles","components_Network_NetworkTooltip","components_Network_NetworkModal","console","log","App","_useQueryParams","_useQueryParams2","updateParams","viz","isEmbed","itemGroupType","matchingItem","components_Network_Network","newState","ReactDOM","render","StrictMode","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.df2d9778.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport { format } from \"d3-format\";\nimport { timeParse } from \"d3-time-format\";\n\nexport const move = (x, y = 0, isAttr = false) => ({\n  transform: `translate(${x}${isAttr ? \"\" : \"px\"}, ${y}${isAttr ? \"\" : \"px\"})`,\n});\n\nexport const moveCentered = (x, y = 0) => ({\n  transform: `translate(calc(${x}px - 50%), calc(${y}px - 50%))`,\n});\n\nexport const moveTooltip = (x, y = 0) => ({\n  transform: `translate(calc(${x}px - 50%), calc(${y}px - 100%))`,\n});\n\nexport const getSpiralPositions = (\n  n = 100,\n  pointRadius = 5,\n  angleDiff = 2,\n  distance = 1.5\n) => {\n  let angle = 0;\n  let points = new Array(n).fill(0).map((_, i) => {\n    const radius = Math.sqrt(i + 0.6) * pointRadius * distance;\n    angle += Math.asin(1 / radius) * pointRadius * angleDiff;\n    angle = angle % (Math.PI * 2);\n    const x = Math.cos(angle) * radius;\n    const y = Math.sin(angle) * radius;\n    return {\n      x: i ? x : x * 0.3,\n      y: i ? y : y * 1,\n      angle,\n      r: radius,\n    };\n  });\n  // let firstPoint = points[0];\n  return points.map((d, i) => ({\n    ...d,\n    // x: d[\"x\"] - firstPoint[\"x\"],\n    // y: d[\"y\"] - firstPoint[\"y\"],\n    centerX:\n      (Math.min(...points.slice(0, i).map((d) => d[\"x\"])) +\n        Math.max(...points.slice(0, i).map((d) => d[\"x\"]))) /\n      2,\n    centerY:\n      (Math.min(...points.slice(0, i).map((d) => d[\"y\"])) +\n        Math.max(...points.slice(0, i).map((d) => d[\"y\"]))) /\n      2,\n  }));\n};\n\nlet runningId = 0;\nexport const getUniqueId = () => {\n  runningId++;\n  return runningId;\n};\n\nexport const flatten = (arr) => arr.reduce((a, b) => [...a, ...b], []);\n\nexport const getPointFromAngleAndDistance = (angle, distance) => ({\n  x: Math.cos((angle * Math.PI) / 180) * distance,\n  y: Math.sin((angle * Math.PI) / 180) * distance,\n});\n\nexport const getAngleFromPoints = (p1, p2) =>\n  Math.atan2(p1.y - p2.y, p1.x - p2.x) * (180 / Math.PI);\n\nexport const getAngleFromRadiusAndDistance = (r, distance) =>\n  Math.atan(distance / (2 * r)) * 2 * (180 / Math.PI);\n\nexport const sum = (arr) => arr.reduce((a, b) => a + b, 0);\n\nexport const getDistanceFromXY = ([x, y]) =>\n  Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n\nexport const getNumberWithUnits = (d, numDecimals = 1) => {\n  const siUnits = Math.floor((d / 10).toFixed(0).toString().length);\n  return siUnits >= 15\n    ? format(`.${numDecimals}f`)(d / 1000000000000000) + \" quadrillion\"\n    : siUnits >= 12\n    ? format(`.${numDecimals}f`)(d / 1000000000000) + \" trillion\"\n    : siUnits >= 9\n    ? format(`.${numDecimals}f`)(d / 1000000000) + \" billion\"\n    : siUnits >= 6\n    ? format(`.${numDecimals}f`)(d / 1000000) + \" million\"\n    : siUnits >= 3\n    ? format(`.${numDecimals}f`)(d / 1000) + \" thousand\"\n    : d < 0.001\n    ? 0\n    : d < 0.1\n    ? format(`,.2f`)(d)\n    : format(`,.02f`)(d);\n};\n\n// grabbed from https://gist.github.com/callumlocke/cc258a193839691f60dd\nexport const scaleCanvas = (canvas, context, width, height) => {\n  // assume the device pixel ratio is 1 if the browser doesn't specify it\n  const devicePixelRatio = window.devicePixelRatio || 1;\n\n  // determine the 'backing store ratio' of the canvas context\n  const backingStoreRatio =\n    context.webkitBackingStorePixelRatio ||\n    context.mozBackingStorePixelRatio ||\n    context.msBackingStorePixelRatio ||\n    context.oBackingStorePixelRatio ||\n    context.backingStorePixelRatio ||\n    1;\n\n  // determine the actual ratio we want to draw at\n  const ratio = devicePixelRatio / backingStoreRatio;\n\n  if (devicePixelRatio !== backingStoreRatio) {\n    // set the 'real' canvas size to the higher width/height\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n\n    // ...then scale it back down with CSS\n    canvas.style.width = width + \"px\";\n    canvas.style.height = height + \"px\";\n  } else {\n    // this is a normal 1:1 device; just scale it simply\n    canvas.width = width;\n    canvas.height = height;\n    canvas.style.width = \"\";\n    canvas.style.height = \"\";\n  }\n\n  // scale the drawing context so everything will work at the higher ratio\n  context.scale(ratio, ratio);\n};\n\n// from https://davidwalsh.name/javascript-debounce-function\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport const debounce = (func, wait, immediate) => {\n  var timeout;\n  return function () {\n    var context = this,\n      args = arguments;\n    var later = function () {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};\n\nexport const getDomainNameFromUrl = (url) => {\n  var hostname;\n  //find & remove protocol (http, ftp, etc.) and get hostname\n\n  if (url.indexOf(\"//\") > -1) {\n    hostname = url.split(\"/\")[2];\n  } else {\n    hostname = url.split(\"/\")[0];\n  }\n\n  //find & remove port number\n  hostname = hostname.split(\":\")[0];\n  hostname = hostname.replace(\"www.\", \"\");\n  //find & remove \"?\"\n  hostname = hostname.split(\"?\")[0];\n\n  return hostname;\n};\n\nexport const groupBy = function (xs, key) {\n  return xs.reduce(function (rv, x) {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nexport const parseDate = (date) => {\n  if (!date) return null;\n  const numberOfSlashes = date.split(/\\//g).length - 1;\n  const dateFormat = numberOfSlashes === 2 ? \"%m/%d/%Y\" : \"%Y\";\n  return timeParse(dateFormat)(date);\n};\n\nexport const sortBy = (arr, key) =>\n  arr.sort((a, b) =>\n    (typeof key === \"function\" ? key(a) : a[key]) >\n    (typeof key === \"function\" ? key(b) : b[key])\n      ? 1\n      : -1\n  );\nexport const sortByFunction = (key) => (a, b) =>\n  (typeof key === \"function\" ? key(a) : a[key]) >\n  (typeof key === \"function\" ? key(b) : b[key])\n    ? 1\n    : -1;\n\nexport const keepBetween = (value, min, max) =>\n  Math.max(min, Math.min(max, value));\n\nexport function toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n\nexport const combineChartDimensions = (dimensions) => {\n  let parsedDimensions = {\n    marginTop: 0,\n    marginRight: 0,\n    marginBottom: 0,\n    marginLeft: 0,\n    ...dimensions,\n  };\n\n  return {\n    ...parsedDimensions,\n    boundedHeight: Math.max(\n      parsedDimensions.height -\n        parsedDimensions.marginTop -\n        parsedDimensions.marginBottom,\n      0\n    ),\n    boundedWidth: Math.max(\n      parsedDimensions.width -\n        parsedDimensions.marginLeft -\n        parsedDimensions.marginRight,\n      0\n    ),\n  };\n};\n\nexport const useChartDimensions = (passedSettings) => {\n  const ref = useRef();\n  const dimensions = combineChartDimensions(passedSettings);\n\n  const [width, changeWidth] = useState(0);\n  const [height, changeHeight] = useState(0);\n\n  useEffect(() => {\n    if (dimensions.width && dimensions.height) return [ref, dimensions];\n\n    const element = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      if (!Array.isArray(entries)) return;\n      if (!entries.length) return;\n\n      const entry = entries[0];\n\n      if (width !== entry.contentRect.width)\n        changeWidth(entry.contentRect.width);\n      if (height !== entry.contentRect.height)\n        changeHeight(entry.contentRect.height);\n    });\n\n    resizeObserver.observe(element);\n\n    return () => resizeObserver.unobserve(element);\n  }, []);\n\n  const newSettings = combineChartDimensions({\n    ...dimensions,\n    width: dimensions.width || width,\n    height: dimensions.height || height,\n  });\n\n  return [ref, newSettings];\n};\n\nexport const fromPairs = (arr) => {\n  let res = {};\n  arr.forEach((d) => {\n    res[d[0]] = d[1];\n  });\n  return res;\n};\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport const getUrlParams = () => {\n  const parts = window.location.search.slice(1).split(\"&\");\n  if (!parts) return;\n  let params = {};\n  parts.forEach((part) => {\n    const [key, value] = part.split(\"=\");\n    if (!key) return;\n    params[key] = decodeURIComponent(value);\n  });\n  return params;\n};\n\nconst paramsObjectToString = (obj) => {\n  const keys = Object.keys(obj);\n  const values = Object.values(obj);\n  return keys\n    .map((key, i) => [key, values[i]].map(encodeURIComponent).join(\"=\"))\n    .filter((d, i) => values[i] != null)\n    .join(\"&\");\n};\n\nexport const useQueryParams = () => {\n  const [localParams, setLocalParams] = useState(getUrlParams);\n  const currentParams = useRef({});\n\n  useEffect(() => {\n    const params = getUrlParams();\n    setLocalParams(params);\n    currentParams.current = params;\n  }, []);\n\n  const updateParams = (newParams) => {\n    setParams({\n      ...currentParams.current,\n      ...newParams,\n    });\n  };\n\n  const setParams = (newParams) => {\n    const newUrl = [\n      window.location.protocol,\n      \"//\",\n      window.location.host,\n      window.location.pathname,\n      \"?\",\n      paramsObjectToString(newParams),\n    ].join(\"\");\n    window.history.pushState({ path: newUrl }, \"\", newUrl);\n    setLocalParams(newParams);\n    currentParams.current = newParams;\n  };\n\n  return [localParams, updateParams, setParams];\n};\n\nexport function useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\nexport function countBy(collection, func) {\n  var object = Object.create(null);\n\n  collection.forEach(function (item) {\n    var key = func(item);\n    if (key in object) {\n      ++object[key];\n    } else {\n      object[key] = 1;\n    }\n  });\n\n  return object;\n}\n\nexport const truncate = (str, len = 23) =>\n  str.length > len - 2 ? str.slice(0, len) + \"...\" : str;\n","import React from \"react\";\nimport rawData from \"./data.json\";\nimport { fromPairs } from \"./utils\";\n\nexport const types = [\"Interventions\", \"Investments\", \"Actors\"];\n\nconst getContributionArea = (d) => {\n  return [\n    ...new Set(d[\"Topical Contribution Area\"].map((d) => d.split(\":\")[0])),\n  ].sort();\n  // .join(\" & \");\n};\nexport const data = fromPairs(\n  types.map((type) => [\n    type,\n    rawData[type].map((d) => ({\n      ...d,\n      mainContributionArea: d[\"Topical Contribution Area\"]\n        ? getContributionArea(d)\n        : null,\n    })),\n  ])\n);\n\nconst colors = [\"#4d405a\", \"#4d405a\", \"#4d405a\", \"#4d405a\"];\n\nlet typeColors = {};\ntypes.forEach((type, i) => {\n  typeColors[type] = colors[i % colors.length];\n});\nexport { typeColors };\n\nexport const contributionAreas = [\"Mitigation\", \"Geoengineering\", \"Adaptation\"];\n// const contributionAreaColorsList = [\"#89b792\", \"#4d405a\", \"#F79F1F\"];\nconst contributionAreaColorsList = [\n  \"var(--accent-2)\",\n  \"var(--accent-3)\",\n  \"var(--accent-4)\",\n];\nlet contributionAreaColors = {};\ncontributionAreas.forEach((contributionArea, i) => {\n  contributionAreaColors[contributionArea] =\n    contributionAreaColorsList[i % colors.length];\n});\nlet contributionAreaColorCombos = [];\nconst handleCombo = (areaNames) => {\n  const slug = areaNames.sort().join(\"--\");\n  contributionAreaColorCombos.push({\n    slug,\n    colors: areaNames.map((d) => contributionAreaColors[d]),\n  });\n  contributionAreaColors[slug] = `url(#${slug})`;\n};\ncontributionAreas.forEach((contributionArea, i) => {\n  contributionAreas.slice(i + 1).forEach((otherContributionArea) => {\n    const areaNames = [contributionArea, otherContributionArea];\n    handleCombo(areaNames);\n  });\n});\nhandleCombo(contributionAreas);\nexport { contributionAreaColors, contributionAreaColorCombos };\n\nexport const statusColors = {\n  Active: \"#89b792\",\n};\n\nexport const fieldLabels = {\n  mainContributionArea: \"Main contribution area\",\n  \"Entity Type\": \"actor type\",\n};\n\nexport const typeShapes = {\n  Interventions: (\n    <g transform=\"translate(-50, -50)\">\n      {/* <path d=\"M78.4,37.6l-3.1,3.1c2.2,4.5,3.4,9.6,3.4,15c0,19-15.4,34.4-34.4,34.4C25.5,90,10,74.6,10,55.6c0-19,15.4-34.4,34.4-34.4     c5.4,0,10.4,1.2,14.9,3.4l3.1-3.1v-3.8c-5.5-2.6-11.6-4.1-18-4.1c-23.1,0-41.9,18.8-41.9,41.9c0,23.1,18.8,41.9,41.9,41.9     c23.1,0,41.9-18.8,41.9-41.9c0-6.4-1.5-12.5-4.1-18H78.4z\" />\n      <path d=\"M44.4,36.7c0.9,0,1.8,0.1,2.7,0.2l6.2-6.2c-2.8-1.1-5.7-1.6-8.9-1.6C29.8,29.2,18,41,18,55.6c0,14.6,11.8,26.5,26.5,26.5     c14.6,0,26.5-11.9,26.5-26.5c0-3.1-0.6-6.1-1.6-8.9l-6.2,6.2c0.2,0.9,0.2,1.8,0.2,2.7c0,10.4-8.5,18.9-18.9,18.9     C34,74.5,25.5,66,25.5,55.6S34,36.7,44.4,36.7z\" />\n      <path d=\"M97.3,16.7c-0.4-1.1-1.5-1.7-2.6-1.7h-9.6V5.3c0-1.1-0.7-2.2-1.7-2.6c-1.1-0.4-2.3-0.2-3.1,0.6l-9.5,9.5     c-0.5,0.5-0.8,1.2-0.8,2v9.9L49,45.6c-1.4-0.7-3-1.1-4.6-1.1c-6.1,0-11,4.9-11,11s4.9,11,11,11s11-4.9,11-11     c0-1.7-0.4-3.2-1.1-4.6L75.3,30h9.9c0.7,0,1.5-0.3,2-0.8l9.5-9.5C97.5,18.9,97.7,17.7,97.3,16.7z\" /> */}\n      <path d=\"M50,5C25.2,5,5,25.2,5,50s20.2,45,45,45s45-20.2,45-45S74.8,5,50,5z M50,85c-19.3,0-35-15.7-35-35s15.7-35,35-35   s35,15.7,35,35S69.3,85,50,85z\" />\n      <path d=\"M50,20c-16.5,0-30,13.5-30,30s13.5,30,30,30s30-13.5,30-30S66.5,20,50,20z M50,70c-11,0-20-9-20-20s9-20,20-20s20,9,20,20   S61,70,50,70z\" />\n      <path d=\"M50,35c-8.3,0-15,6.7-15,15s6.7,15,15,15s15-6.7,15-15S58.3,35,50,35z M50,55c-2.8,0-5-2.2-5-5s2.2-5,5-5s5,2.2,5,5   S52.8,55,50,55z\" />\n    </g>\n  ),\n  Investments: (\n    <g transform=\"translate(-50, -50)\">\n      <path d=\"M68.27,28.08H31.73S6.15,50,6.15,75.58c0,14.61,11,21.92,18.27,21.92H75.58c7.3,0,18.27-7.31,18.27-21.92C93.85,50,68.27,28.08,68.27,28.08ZM53.65,78.86v5.85h-7.3V78.88c-5.38-1-8.76-4.32-9-9.14h6.33c.31,2.53,2.86,4.16,6.55,4.16,3.4,0,5.81-1.65,5.81-4,0-2-1.56-3.14-5.4-4l-4.07-.87c-5.7-1.19-8.5-4.16-8.5-8.93s3.18-8.21,8.24-9.34V40.87h7.3v5.9c4.94,1.1,8.23,4.47,8.39,9H55.89c-.31-2.47-2.61-4.12-5.77-4.12s-5.44,1.52-5.44,3.9c0,1.93,1.49,3,5.16,3.82l3.77.8c6.29,1.32,9,4,9,8.89C62.61,74.29,59.25,77.79,53.65,78.86Z\" />\n      <path d=\"M68.27,6.15H58.17a11,11,0,0,0-16.34,0H31.73a3.66,3.66,0,0,0-3.39,5l3.39,9.61H68.27l3.39-9.61A3.66,3.66,0,0,0,68.27,6.15Z\" />\n    </g>\n  ),\n  Actors: (\n    <g transform=\"translate(-50, -50)\">\n      <circle cx=\"47.5\" cy=\"30.028\" r=\"22.623\" />\n      <path d=\"M68.213,49.752c-5.217,5.477-12.57,8.898-20.713,8.898s-15.496-3.422-20.713-8.898c-8.004,3.217-13.162,8.25-13.162,13.911   c0,9.712,15.166,23.932,33.875,23.932s33.875-14.22,33.875-23.932C81.375,58.002,76.217,52.969,68.213,49.752z\" />\n    </g>\n  ),\n  Organizations: (\n    <g style={{ transform: \"scale(4) translate(-12.5px, -12.5px)\" }}>\n      <path d=\"M18,22 L22,22 L22,13 L18,13 L18,22 Z M13,10 L11,10 C10.447,10 10,9.552 10,9 C10,8.448 10.447,8 11,8 L13,8 C13.553,8 14,8.448 14,9 C14,9.552 13.553,10 13,10 L13,10 Z M13,14 L11,14 C10.447,14 10,13.552 10,13 C10,12.448 10.447,12 11,12 L13,12 C13.553,12 14,12.448 14,13 C14,13.552 13.553,14 13,14 L13,14 Z M13,18 L11,18 C10.447,18 10,17.552 10,17 C10,16.448 10.447,16 11,16 L13,16 C13.553,16 14,16.448 14,17 C14,17.552 13.553,18 13,18 L13,18 Z M2,22 L6,22 L6,8 L2,8 L2,22 Z M23,11 L22,11 L22,9 C22,8.448 21.553,8 21,8 C20.447,8 20,8.448 20,9 L20,11 L18,11 L18,4 C18,3.448 17.553,3 17,3 L13,3 L13,1 C13,0.448 12.553,0 12,0 C11.447,0 11,0.448 11,1 L11,3 L7,3 C6.447,3 6,3.448 6,4 L6,6 L4,6 L4,4 C4,3.448 3.553,3 3,3 C2.447,3 2,3.448 2,4 L2,6 L1,6 C0.447,6 0,6.448 0,7 L0,23 C0,23.552 0.447,24 1,24 L7,24 L17,24 L23,24 C23.553,24 24,23.552 24,23 L24,12 C24,11.448 23.553,11 23,11 L23,11 Z\" />\n    </g>\n  ),\n  Regulations: (\n    <g transform=\"translate(-50, -50)\">\n      <circle cx=\"50\" cy=\"50\" r=\"50\" />\n    </g>\n  ),\n};\n","import React from \"react\";\n\nimport \"./Icon.css\";\n\nconst sizes = {\n  xs: 9,\n  s: 12,\n  m: 19,\n  l: 25,\n  xl: 45,\n};\nconst Icon = ({ name, size = \"m\", direction = \"e\", className, ...props }) => {\n  const dimension = sizes[size];\n\n  return (\n    <svg\n      className={`Icon Icon--direction-${direction} ${className}`}\n      width={dimension}\n      height={dimension}\n      viewBox=\"0 0 25 25\"\n      {...props}\n    >\n      {iconPaths[name]}\n    </svg>\n  );\n};\n\nexport default Icon;\n\nconst iconPaths = {\n  arrow: (\n    <path d=\"M12.1454 0.796729C13.1125 -0.0711128 14.5999 0.00929699 15.4678 0.976329L24.3983 10.9276C25.2006 11.8216 25.2006 13.1763 24.3983 14.0703L15.4678 24.0216C14.5999 24.9886 13.1125 25.069 12.1454 24.2012C11.1784 23.3333 11.098 21.8459 11.9658 20.8788L17.0146 15.253H2.35268C1.05333 15.253 0 14.1996 0 12.9003C0 11.601 1.05333 10.5476 2.35268 10.5476H17.735L11.9658 4.11906C11.098 3.15203 11.1784 1.66457 12.1454 0.796729Z\" />\n  ),\n  controls: (\n    <path d=\"M4.4384 3C5.01369 3 5.48006 3.46637 5.48006 4.04167V11.3333C5.48006 11.9086 5.01369 12.375 4.4384 12.375C3.8631 12.375 3.39673 11.9086 3.39673 11.3333V4.04167C3.39673 3.46637 3.8631 3 4.4384 3ZM3.39673 16.5417V22.7917C3.39673 23.367 3.8631 23.8333 4.4384 23.8333C5.01369 23.8333 5.48006 23.367 5.48006 22.7917V16.5417H7.5634C8.13869 16.5417 8.60506 16.0753 8.60506 15.5C8.60506 14.9247 8.13869 14.4583 7.5634 14.4583H4.4384H1.3134C0.738099 14.4583 0.271729 14.9247 0.271729 15.5C0.271729 16.0753 0.738099 16.5417 1.3134 16.5417H3.39673ZM13.8134 13.4167C13.8134 12.8414 13.347 12.375 12.7717 12.375C12.1964 12.375 11.7301 12.8414 11.7301 13.4167V22.7917C11.7301 23.367 12.1964 23.8333 12.7717 23.8333C13.347 23.8333 13.8134 23.367 13.8134 22.7917V13.4167ZM12.7717 3C13.347 3 13.8134 3.46637 13.8134 4.04167V8.20833H15.8967C16.472 8.20833 16.9384 8.6747 16.9384 9.25C16.9384 9.8253 16.472 10.2917 15.8967 10.2917L12.7717 10.2917L9.64673 10.2917C9.07143 10.2917 8.60506 9.8253 8.60506 9.25C8.60506 8.6747 9.07143 8.20833 9.64673 8.20833H11.7301V4.04167C11.7301 3.46637 12.1964 3 12.7717 3ZM21.1051 16.5417H24.2301C24.8054 16.5417 25.2717 17.008 25.2717 17.5833C25.2717 18.1586 24.8054 18.625 24.2301 18.625H22.1467V22.7917C22.1467 23.367 21.6804 23.8333 21.1051 23.8333C20.5298 23.8333 20.0634 23.367 20.0634 22.7917V18.625H17.9801C17.4048 18.625 16.9384 18.1586 16.9384 17.5833C16.9384 17.008 17.4048 16.5417 17.9801 16.5417H21.1051ZM21.1051 3C21.6804 3 22.1467 3.46637 22.1467 4.04167V13.4167C22.1467 13.992 21.6804 14.4583 21.1051 14.4583C20.5298 14.4583 20.0634 13.992 20.0634 13.4167V4.04167C20.0634 3.46637 20.5298 3 21.1051 3Z\" />\n  ),\n  info: (\n    <g>\n      <path d=\"M15.3729 0.578613C16.1032 0.578613 16.7157 0.831852 17.2104 1.33833C17.7169 1.84481 17.9701 2.45729 17.9701 3.17579C17.9701 3.89428 17.7169 4.50676 17.2104 5.01324C16.7039 5.51972 16.0914 5.77296 15.3729 5.77296C14.6662 5.77296 14.0596 5.51972 13.5531 5.01324C13.0467 4.50676 12.7934 3.89428 12.7934 3.17579C12.7934 2.45729 13.0408 1.84481 13.5355 1.33833C14.0419 0.831852 14.6544 0.578613 15.3729 0.578613ZM16.4683 8.70582L12.8464 21.2677C12.6462 21.9862 12.5461 22.4573 12.5461 22.6811C12.5461 22.8107 12.5991 22.9343 12.7051 23.0521C12.8111 23.1581 12.923 23.2111 13.0408 23.2111C13.241 23.2111 13.4412 23.1228 13.6415 22.9461C14.1715 22.5103 14.8075 21.7211 15.5496 20.5786L16.1503 20.932C14.3717 24.0297 12.4813 25.5786 10.4789 25.5786C9.71332 25.5786 9.10083 25.3666 8.64147 24.9426C8.19389 24.5068 7.97009 23.9591 7.97009 23.2995C7.97009 22.8637 8.07021 22.3101 8.27045 21.6387L10.7263 13.1935C10.9618 12.3807 11.0796 11.7682 11.0796 11.356C11.0796 11.0969 10.9677 10.8672 10.7439 10.667C10.5202 10.4667 10.2139 10.3666 9.82522 10.3666C9.64854 10.3666 9.43652 10.3725 9.18917 10.3843L9.41886 9.67755L15.4083 8.70582H16.4683Z\" />\n    </g>\n  ),\n  pause: (\n    <>\n      <path d=\"M9.5 21.9092V3.15918C9.5 1.43329 8.10089 0.0341797 6.375 0.0341797C4.64911 0.0341797 3.25 1.43329 3.25 3.15918V21.9092C3.25 23.6351 4.64911 25.0342 6.375 25.0342C8.10089 25.0342 9.5 23.6351 9.5 21.9092Z\" />\n      <path d=\"M22 21.9092V3.15918C22 1.43329 20.6009 0.0341797 18.875 0.0341797C17.1491 0.0341797 15.75 1.43329 15.75 3.15918V21.9092C15.75 23.6351 17.1491 25.0342 18.875 25.0342C20.6009 25.0342 22 23.6351 22 21.9092Z\" />\n    </>\n  ),\n  play: (\n    <path d=\"M2.15039 4.29245C2.15039 1.59772 5.1315 -0.029815 7.39825 1.42738L21.5358 10.5158C23.6214 11.8565 23.6214 14.9052 21.5358 16.2459L7.39825 25.3343C5.1315 26.7915 2.15039 25.164 2.15039 22.4693V4.29245Z\" />\n  ),\n  refresh: (\n    <path d=\"M6.97937 3.40529C8.70577 2.45337 10.6948 2.08834 12.6467 2.36521C14.5986 2.64207 16.4076 3.54582 17.8012 4.94028C17.8093 4.94841 17.8176 4.95642 17.8259 4.9643L21.0026 7.95574H17.048C16.4203 7.95574 15.9115 8.4646 15.9115 9.09231C15.9115 9.72002 16.4203 10.2289 17.048 10.2289H23.8643H23.8675C24.0269 10.2289 24.1787 10.196 24.3165 10.1367C24.4544 10.0775 24.5828 9.98985 24.6925 9.874C24.7014 9.86462 24.7102 9.85508 24.7187 9.8454C24.9095 9.62998 25.0041 9.36088 25.004 9.09232C25.004 9.09121 25.004 9.09009 25.004 9.08898V2.27288C25.004 1.64517 24.4952 1.13631 23.8675 1.13631C23.2397 1.13631 22.7309 1.64517 22.7309 2.27288V6.46082L19.3966 3.32095C17.6563 1.58497 15.4 0.45984 12.9659 0.11459C10.526 -0.231487 8.03977 0.224801 5.88178 1.4147C3.72379 2.60459 2.01099 4.46363 1.00148 6.71166C-0.00803095 8.9597 -0.259554 11.4749 0.284811 13.8784C0.829176 16.2818 2.13994 18.4432 4.01957 20.0368C5.89921 21.6305 8.24589 22.5701 10.706 22.714C13.1661 22.8579 15.6063 22.1984 17.6589 20.8347C19.7116 19.4711 21.2654 17.4773 22.0863 15.1538C22.2954 14.5619 21.9851 13.9126 21.3933 13.7035C20.8014 13.4944 20.1521 13.8047 19.943 14.3966C19.2863 16.2554 18.0432 17.8504 16.4011 18.9413C14.759 20.0322 12.8068 20.5599 10.8387 20.4447C8.87066 20.3296 6.99332 19.5779 5.48961 18.303C3.9859 17.0281 2.93729 15.299 2.5018 13.3762C2.06631 11.4535 2.26753 9.44129 3.07513 7.64286C3.88274 5.84443 5.25298 4.35721 6.97937 3.40529Z\" />\n  ),\n  x: (\n    <path d=\"M24.7678 4.76777C25.7441 3.79146 25.7441 2.20854 24.7678 1.23223C23.7915 0.255922 22.2085 0.255922 21.2322 1.23223L13 9.46447L4.76777 1.23223C3.79146 0.255922 2.20854 0.255922 1.23223 1.23223C0.255923 2.20854 0.255923 3.79146 1.23223 4.76777L9.46447 13L1.23223 21.2322C0.255923 22.2085 0.255923 23.7915 1.23223 24.7678C2.20854 25.7441 3.79146 25.7441 4.76777 24.7678L13 16.5355L21.2322 24.7678C22.2085 25.7441 23.7915 25.7441 24.7678 24.7678C25.7441 23.7915 25.7441 22.2085 24.7678 21.2322L16.5355 13L24.7678 4.76777Z\" />\n  ),\n};\n","import React, { useEffect, useState, useMemo } from \"react\";\n\nimport {\n  countBy,\n  flatten,\n  useDebounce,\n  sortByFunction,\n  fromPairs,\n} from \"./../../utils\";\nimport { types } from \"./../../constants\";\nimport Icon from \"./../Icon/Icon\";\n\nimport \"./NetworkSearch.css\";\n\nconst NetworkSearch = ({ data, searchTerm, setSearchTerm }) => {\n  const [searchTermLocal, setSearchTermLocal] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n\n  const allItems = useMemo(\n    () => flatten(types.map((type) => data[type].map((d) => ({ ...d, type })))),\n    [data]\n  );\n\n  useEffect(() => {\n    setSearchTermLocal(searchTerm);\n  }, [searchTerm]);\n\n  const debouncedSearchTerm = useDebounce(searchTermLocal, 300);\n\n  const [didMount, setDidMount] = useState(false);\n  useEffect(() => {\n    if (!didMount) {\n      setDidMount(true);\n      return;\n    }\n    setSearchTerm(searchTermLocal ? searchTermLocal : null);\n  }, [debouncedSearchTerm]);\n\n  const onSearchTermChange = (e) => {\n    const newSearchTerm = e.target.value;\n    setSearchTermLocal(newSearchTerm);\n  };\n\n  const uniqueStringsPerField = useMemo(() => {\n    let uniqueStringsPerField = {};\n    fields.forEach((field) => {\n      const items = countBy(allItems, fieldToAccessorMap[field]);\n      uniqueStringsPerField[field] = Object.keys(items)\n        .filter((d) => d)\n        .sort(sortByFunction((d) => -items[d]));\n    });\n    return uniqueStringsPerField;\n  }, [allItems]);\n\n  const searchTermLocalLower = searchTermLocal.toLowerCase();\n\n  const filteredStringsPerField = fromPairs(\n    fields.map((field) => [\n      field,\n      uniqueStringsPerField[field].filter((d) =>\n        d.toLowerCase().includes(searchTermLocalLower)\n      ),\n    ])\n  );\n\n  useEffect(() => {\n    const onKeydown = (e) => {\n      if (e.key !== \"Escape\") return;\n      setIsOpen(false);\n    };\n    window.addEventListener(\"keydown\", onKeydown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onKeydown);\n    };\n  }, []);\n\n  return (\n    <div className=\"NetworkSearch\">\n      <div className=\"NetworkSearch__input\">\n        <input\n          value={searchTermLocal}\n          onChange={onSearchTermChange}\n          placeholder=\"Search for a name\"\n          onFocus={() => setIsOpen(true)}\n        />\n        {!!searchTermLocal && (\n          <Icon\n            className=\"NetworkSearch__input__close\"\n            name=\"x\"\n            size=\"s\"\n            onClick={() => setSearchTerm(\"\")}\n          />\n        )}\n      </div>\n      {isOpen && (\n        <>\n          <div className=\"NetworkSearch__modal\">\n            {fields.map((field) => (\n              <div className=\"NetworkSearch__field\" key={field}>\n                <h6>{field}</h6>\n                <div className=\"NetworkSearch__options\">\n                  {filteredStringsPerField[field].slice(0, 5).map((item) => (\n                    <button\n                      className=\"NetworkSearch__option\"\n                      key={item}\n                      onClick={() => setSearchTerm(item)}\n                    >\n                      {item}\n                    </button>\n                  ))}\n                  {filteredStringsPerField[field].length > 4 && (\n                    <div className=\"NetworkSearch__more\">\n                      + {filteredStringsPerField[field].length - 4} more\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n          <div\n            className=\"NetworkSearch__modal__background\"\n            onClick={() => setIsOpen(false)}\n          ></div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default NetworkSearch;\n\nconst fieldToAccessorMap = {\n  Interventions: (d) => [d[\"type\"] == \"Interventions\" ? d[\"label\"] : undefined],\n  Investments: (d) => [d[\"type\"] == \"Investments\" ? d[\"label\"] : undefined],\n  Actors: (d) => [d[\"type\"] == \"Actors\" ? d[\"label\"] : undefined],\n  Regulations: (d) => [d[\"type\"] == \"Regulations\" ? d[\"label\"] : undefined],\n};\nconst fields = Object.keys(fieldToAccessorMap);\n","import React, { useMemo } from \"react\";\nimport { getUniqueId } from \"./../utils\";\n\nconst CircleText = ({ r = 10, rotate = 0, children, ...props }) => {\n  const id = useMemo(getUniqueId, []);\n\n  return (\n    <>\n      <path\n        fill=\"transparent\"\n        d={[\n          [\"M\", 0, r].join(\" \"),\n          [\"A\", r, r, 0, 0, 1, 0, -r].join(\" \"),\n          [\"A\", r, r, 0, 0, 1, 0, r].join(\" \"),\n        ].join(\" \")}\n        id={id}\n        transform={`rotate(${rotate})`}\n        style={{ pointerEvents: \"none\" }}\n      ></path>\n      <text textAnchor=\"middle\" {...props}>\n        <textPath href={`#${id}`} startOffset=\"50%\">\n          {children}\n        </textPath>\n      </text>\n    </>\n  );\n};\n\nexport default CircleText;\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  forceSimulation,\n  forceX,\n  forceY,\n  forceCollide,\n  forceLink,\n} from \"d3-force\";\nimport { polygonCentroid, polygonHull } from \"d3\";\n\nimport {\n  keepBetween,\n  truncate,\n  move,\n  getAngleFromPoints,\n  getPointFromAngleAndDistance,\n  flatten,\n  fromPairs,\n  getSpiralPositions,\n  sortBy,\n  useChartDimensions,\n} from \"./../../utils\";\nimport {\n  types,\n  contributionAreaColors,\n  contributionAreaColorCombos,\n  typeShapes,\n} from \"./../../constants\";\nimport CircleText from \"./../CircleText\";\n\nimport \"./NetworkBubbles.css\";\n\nconst NetworkBubbles = ({\n  data,\n  groupType,\n  groupMeta,\n  searchTerm,\n  activeFilters,\n  focusedItem,\n  onFocusItem,\n  hoveredItem,\n  onHoverItem,\n  focusedNode,\n  setFocusedNodeId,\n}) => {\n  const [ref, dms] = useChartDimensions();\n  const timeout = useRef();\n  const simulationClusters = useRef();\n  const simulationClustersData = useRef();\n  const simulation = useRef();\n  const simulationData = useRef();\n  const tickIteration = useRef();\n  const groups = useRef([]);\n  const links = useRef([]);\n  const cachedGroupPositions = useRef({});\n  const forceUpdate = useForceUpdate();\n  const clusterByKey = (groupMeta || {})[\"clusterBy\"];\n  const getClusterName =\n    (groupMeta || {})[\"getClusterName\"] || ((d) => d[clusterByKey]);\n  const getColor = (d) =>\n    contributionAreaColors[d[\"mainContributionArea\"].sort().join(\"--\")] ||\n    \"#888\";\n  const getSize = (groupMeta || {})[\"getSize\"] || (() => 1);\n  const fromColor = \"#92C8C6\";\n  const toColor = \"#EEA969\";\n\n  const baseCircleSize =\n    (dms.width * dms.height * 0.001) / (data[groupType].length + 30);\n\n  const { clusters, clusterPositions } = useMemo(() => {\n    if (!data) return [];\n    let groups = {};\n    let clusters = [];\n    if (!clusterByKey) {\n      clusters = [\n        {\n          clusters: data[groupType].map((d) => ({\n            ...d,\n            name: \"\",\n            group: 1,\n            value: 10,\n          })),\n        },\n      ];\n    } else {\n      data[groupType].forEach((d) => {\n        let clusterName = getClusterName(d);\n        if (clusterName && clusterName.length > 1) return;\n        if (!groups[clusterName]) groups[clusterName] = [];\n        groups[clusterName].push({\n          ...d,\n          group: clusterName,\n          value: baseCircleSize * 70,\n        });\n      });\n      Object.keys(groups).forEach((group) => {\n        const items = groups[group];\n        const count = items.length;\n        const area = items.reduce((a, b) => (a.value || 0) + (b.value || 0), 0);\n        clusters.push({\n          name: group,\n          count,\n          r: Math.sqrt(area / Math.PI) * 1,\n          items,\n        });\n      });\n    }\n    const numberOfGroups = clusters.length;\n\n    const groupPositions = new Array(numberOfGroups)\n      .fill(0)\n      .map((_, i) =>\n        getPointFromAngleAndDistance(\n          (360 / numberOfGroups) * i + 180,\n          baseCircleSize * 6\n        )\n      )\n      .map((d, i) => ({\n        ...d,\n        ...clusters[i],\n        x: d.x + dms.width / 2,\n        y: d.y + dms.height / 2,\n      }));\n\n    simulationClustersData.current = [...groupPositions.map((d) => ({ ...d }))];\n    simulationClusters.current = forceSimulation(simulationClustersData.current)\n      .force(\n        \"x\",\n        forceX(dms.width / 2).strength(dms.width < dms.height ? 0.1 : 0.05)\n      )\n      .force(\n        \"y\",\n        forceY(dms.height / 2).strength(dms.width < dms.height ? 0.05 : 0.1)\n      )\n      .force(\n        \"collide\",\n        forceCollide((d) => d[\"r\"] + baseCircleSize * 8)\n      )\n      .stop();\n    new Array(60).fill(0).forEach(() => {\n      simulationClusters.current.tick();\n    });\n    let clusterPositions = {};\n    clusters.forEach(({ name }, i) => {\n      clusterPositions[name] = [\n        simulationClustersData.current[i].x,\n        simulationClustersData.current[i].y,\n      ];\n    });\n    return { clusters, clusterPositions };\n  }, [data, dms.width + dms.height, groupMeta]);\n\n  const getClusterPosition = (d = {}) => {\n    const clusterName = getClusterName(d);\n    if (clusterName && clusterName.length > 1) {\n      const positions = clusterName\n        .map((name) => clusterPositions[name])\n        .filter((d) => d);\n      const avg = (arr) => arr.reduce((a, b) => a + b, 0) / arr.length;\n      return [avg(positions.map((d) => d[0])), avg(positions.map((d) => d[1]))];\n    }\n    const position = clusterPositions[clusterName];\n    return position || [dms.width / 2, dms.height / 2];\n  };\n\n  useEffect(() => {\n    cachedGroupPositions.current = {};\n  }, [dms.width, dms.height]);\n\n  useEffect(() => {\n    if (!data) return;\n    if (!dms.width) return;\n    if (!groupMeta) return;\n    // if (focusedItem) return;\n\n    if (simulation.current) {\n      simulation.current.stop();\n    }\n\n    const linkKeys = groupMeta[\"links\"];\n\n    let initialLinks = [];\n    data[groupType].map((d) => {\n      linkKeys.map(([key, tableName, typeOfLink]) => {\n        const targetIds = d[key] || [];\n        targetIds.forEach((targetId) => {\n          const id = `${tableName}--${targetId}`;\n          const target = data[tableName].find((d) => d[\"id\"] == id);\n          if (!target) return;\n          initialLinks.push({\n            source: d[\"id\"],\n            target: id,\n            index: initialLinks.length,\n            type: typeOfLink,\n          });\n        });\n      });\n    });\n\n    let nodes = flatten(\n      types.map((type) =>\n        data[type].map((d) => ({ ...d, type, isMain: type == groupType }))\n      )\n    ).filter(\n      (d) =>\n        d[\"type\"] == groupType ||\n        initialLinks.find((link) => link[\"target\"] == d[\"id\"])\n    );\n\n    // const spiralPositions = getSpiralPositions(\n    //   nodes.length,\n    //   baseCircleSize,\n    //   Math.sqrt(baseCircleSize) * 1,\n    //   Math.sqrt(baseCircleSize) * 0.56\n    // );\n\n    const getId = (d) => (typeof d == \"object\" ? d[\"id\"] : d);\n    const getMatches = (d = {}) => {\n      if (!d) return [];\n      let links = initialLinks.filter(\n        (link) =>\n          getId(link[\"target\"]) == d[\"id\"] || getId(link[\"source\"]) == d[\"id\"]\n      );\n      // grab the investment targets as well\n      const investments = new Set(\n        links\n          .map((d) => getId(d[\"target\"]))\n          .filter((d) => d.startsWith(\"Investments--\"))\n      );\n\n      links = [\n        ...links,\n        ...initialLinks.filter(\n          (link) =>\n            investments.has(getId(link[\"target\"])) ||\n            investments.has(getId(link[\"source\"]))\n        ),\n      ];\n      return links;\n    };\n    const getMatchTypes = (d) => {\n      const matches = initialLinks.filter((link) => link[\"target\"] == d[\"id\"]);\n      return [...new Set(matches.map((d) => d[\"type\"]))].sort();\n    };\n\n    nodes = nodes\n      .map((d, i) => {\n        let cachedPosition = cachedGroupPositions.current[d[\"id\"]];\n        if (!cachedPosition)\n          cachedPosition = d.clusterPosition || [dms.width / 2, dms.height / 2];\n        const matchTypes = getMatchTypes(d).join(\"--\");\n        const color = d.isMain ? getColor(d) : \"var(--accent-1)\";\n        const clusterPosition = getClusterPosition(d);\n        // {\n        //     from: fromColor,\n        //     to: toColor,\n        //     \"from--to\": \"url(#from-to)\",\n        //   }[matchTypes] || \"#95afc0\";\n        return {\n          ...d,\n          // x: dms.width / 2 + spiralPositions[i].x,\n          // y: dms.height / 2 + spiralPositions[i].y,\n          x: cachedPosition[0],\n          y: cachedPosition[1],\n          r:\n            (d[\"type\"] == groupType\n              ? baseCircleSize * 1.5\n              : baseCircleSize * 0.7) * getSize(d),\n          numberOfLinks: getMatches(d).length,\n          color,\n          matchTypes,\n          clusterPosition,\n          x: clusterPosition[0],\n          y: clusterPosition[1],\n        };\n      })\n      .sort((a, b) => b.numberOfLinks - a.numberOfLinks);\n    nodes = nodes.map((node) => ({\n      ...node,\n      linkedNodeIds: node.isMain\n        ? []\n        : [\n            ...new Set(\n              getMatches(node).map(\n                (d) => [d.source, d.target].filter((d) => d != node.id)[0]\n              )\n            ),\n          ],\n    }));\n\n    const newFocusedNode = focusedNode || nodes.find((d) => d.isMain);\n    if (!hoveredItem && groupType == \"Actors\") {\n      onHoverItem(newFocusedNode);\n    }\n    if (newFocusedNode) setFocusedNodeId(newFocusedNode[\"id\"]);\n\n    // filter to just 2nd & 3rd relatives\n    if (groupType == \"Actors\") {\n      const matchingLinks = getMatches(newFocusedNode);\n      const matchingIds = new Set([\n        ...matchingLinks.map((d) => d[\"source\"]),\n        ...matchingLinks.map((d) => d[\"target\"]),\n      ]);\n      const nextLevelMatchingLinks = initialLinks.filter(\n        (link) => matchingIds.has(link.target) || matchingIds.has(link.source)\n      );\n      const nextLevelMatchingIds = new Set([\n        ...nextLevelMatchingLinks.map((d) => d[\"source\"]),\n        ...nextLevelMatchingLinks.map((d) => d[\"target\"]),\n      ]);\n      const getDistanceFromFocusedNode = (d) =>\n        d.id == newFocusedNode.id ? 0 : matchingIds.has(d.id) ? 1 : 2;\n      const isAttachedToFocusedNode = (d) => nextLevelMatchingIds.has(d);\n      nodes = nodes\n        .filter((d) => isAttachedToFocusedNode(d[\"id\"]))\n        .map((d) => ({ ...d, distance: getDistanceFromFocusedNode(d) }));\n      initialLinks = initialLinks.filter(\n        (link) =>\n          isAttachedToFocusedNode(link[\"source\"]) &&\n          isAttachedToFocusedNode(link[\"target\"])\n      );\n    }\n\n    tickIteration.current = 0;\n    links.current = [...initialLinks];\n    simulationData.current = [...nodes];\n    simulation.current = forceSimulation(simulationData.current)\n      .force(\n        \"x\",\n        forceX((d) => d.clusterPosition[0]).strength(\n          groupType == \"Actors\" ? 0.3 : (d) => (d.isMain ? 0.2 : 0)\n        )\n      )\n      .force(\n        \"y\",\n        forceY(\n          (d) =>\n            d.clusterPosition[1] +\n            (d.matchTypes == \"from\" ? -30 : d.matchTypes == \"to\" ? 30 : 0)\n        ).strength(groupType == \"Actors\" ? 0.3 : (d) => (d.isMain ? 0.2 : 0))\n      )\n      .force(\n        \"link\",\n        forceLink(links.current)\n          .id((d) => d[\"id\"])\n          .distance(baseCircleSize * 2.6)\n          .strength(0.4)\n      )\n      .force(\n        \"collide\",\n        forceCollide(\n          (d) =>\n            d[\"r\"] +\n            baseCircleSize *\n              (groupType == \"Actors\" ? 3 : 1.2) *\n              (d.isMain ? 1.3 : 0.6)\n        )\n          .strength(0.7)\n          // .iterations(groupType == \"Actors\" ? 10 : 6)\n          .iterations(1)\n      )\n      .alphaMin(0.001)\n      .alpha(groupType == \"Actors\" ? 0.1 : 1)\n      .on(\"tick\", onTick);\n  }, [\n    dms.width,\n    dms.height,\n    data,\n    groupType,\n    // !!focusedItem,\n    groupType == \"Actors\" ? focusedNode : \"\",\n  ]);\n\n  useEffect(() => {\n    if (groupType != \"Actors\") return;\n    if (!focusedNode) return;\n    onHoverItem(focusedNode);\n  }, [groupType == \"Actors\" ? focusedNode : \"\"]);\n\n  const groupBubbles =\n    groupType == \"Actors\"\n      ? []\n      : clusters.map(({ name, items = [] }) => {\n          const position = getClusterPosition(items[0]);\n          if (!position) return [];\n          const points = groups.current\n            .filter((d) => getClusterName(d) == name && d.isMain)\n            .map((d) => [d.x, d.y]);\n          let hull = polygonHull(points) || [];\n          if (!hull.length) hull = points;\n          const top = [\n            keepBetween(\n              points.map((d) => d[0]).reduce((a, b) => a + b, 0) /\n                points.length,\n              50,\n              dms.width - 50\n            ),\n            keepBetween(\n              Math.min(...points.map((d) => d[1])) - baseCircleSize * 5,\n              10,\n              dms.height - 10\n            ),\n          ];\n          return {\n            name,\n            path: hull.length\n              ? \"M\" + hull.map((d) => d.join(\" \")).join(\" L \") + \"Z\"\n              : \"\",\n            top,\n            position,\n          };\n        });\n\n  function onTick(d) {\n    const padding = 20;\n    let secondaryNodesOnNodeRunningCount = {};\n    const numberOfPositions = 5;\n    const spiralPositions = new Array(numberOfPositions)\n      .fill(0)\n      .map((_, i) =>\n        getPointFromAngleAndDistance(\n          (360 / numberOfPositions) * i,\n          baseCircleSize * 2\n        )\n      );\n    simulationData.current.forEach((d) => {\n      d[\"x\"] = keepBetween(\n        d[\"x\"],\n        d[\"r\"] + padding,\n        dms.width - d[\"r\"] - padding\n      );\n      d[\"y\"] = keepBetween(\n        d[\"y\"],\n        d[\"r\"] + padding,\n        dms.height - d[\"r\"] - padding\n      );\n      if (groupType != \"Actors\" && tickIteration.current < 20 && !d.isMain) {\n        let position = [dms.width / 2, dms.height / 2];\n        const linkedNodes = d.linkedNodeIds.map((link) =>\n          simulationData.current.find((d) => d.id == link)\n        );\n\n        if (linkedNodes.length > 1) {\n          position = polygonCentroid(linkedNodes.map((d) => [d.x, d.y]));\n        }\n        if (linkedNodes.length == 1 || Number.isNaN(position[0])) {\n          let linkedId = linkedNodes[0].id;\n          if (!secondaryNodesOnNodeRunningCount[linkedId])\n            secondaryNodesOnNodeRunningCount[linkedId] = 0;\n          const spiralPosition =\n            spiralPositions[\n              secondaryNodesOnNodeRunningCount[linkedId] %\n                spiralPositions.length\n            ];\n          position = [\n            linkedNodes[0].x + spiralPosition.x,\n            linkedNodes[0].y + spiralPosition.y,\n          ];\n          secondaryNodesOnNodeRunningCount[linkedId]++;\n        }\n        d[\"x\"] = position[0];\n        d[\"y\"] = position[1];\n      }\n    });\n    groups.current = simulationData.current;\n\n    cachedGroupPositions.current = {\n      ...cachedGroupPositions.current,\n      ...fromPairs(\n        groups.current.map((item) => [item[\"id\"], [item[\"x\"], item[\"y\"]]])\n      ),\n    };\n    tickIteration.current++;\n\n    forceUpdate();\n    // setGroups(simulationData.current);\n  }\n\n  const updateTooltip = (item) => {\n    if (item) {\n      if (timeout.current) {\n        clearTimeout(timeout.current);\n        timeout.current = null;\n      }\n      onHoverItem(item);\n    } else {\n      timeout.current = setTimeout(() => {\n        onHoverItem(null);\n        timeout.current = null;\n      }, 300);\n    }\n  };\n\n  const getLinkPath = ({ source, target, type }) => {\n    const angle = getAngleFromPoints(source, target);\n    const reverseAngle = getAngleFromPoints(target, source);\n    const startDiff = getPointFromAngleAndDistance(angle, source.r + 2);\n    const targetDiff = getPointFromAngleAndDistance(reverseAngle, target.r + 2);\n    let points = [\n      [source.x - startDiff.x, source.y - startDiff.y],\n      [target.x - targetDiff.x, target.y - targetDiff.y],\n    ];\n    if (type == \"to\") points.reverse();\n    return `M ${points[0].join(\" \")} L ${points[1].join(\" \")}`;\n  };\n\n  const isInHoveredPointNetwork = (item, source) => {\n    if (item.id == hoveredItem.id) return 1;\n    const inNetworkMatches = links.current.filter(\n      (d) => d.source.id == hoveredItem.id || d.target.id == hoveredItem.id\n    );\n    const doesHaveAMatch = !!inNetworkMatches.find(\n      (d) =>\n        (d.target.id == item.id || d.source.id == item.id) &&\n        (!source || d.source.id == source.id)\n    );\n    return doesHaveAMatch ? 0.9 : 0.13;\n  };\n\n  const getItemOpacity = (item, source = null) => {\n    if (searchTerm)\n      return item.label.toLowerCase().includes(searchTerm) ? 1 : 0.13;\n    if (Number.isFinite(item.distance)) {\n      return [1, 0.9, 0.3][item.distance];\n    }\n    if (hoveredItem) return isInHoveredPointNetwork(item, source);\n    if (!activeFilters.length) return 1;\n\n    const unsatisifiedActiveFilters = activeFilters.filter(\n      ({ type, value: filterValue }) => {\n        const value = getFilterFromItem(item, type);\n        if (!value.length) return true;\n        if (source) {\n          const sourceValue = getFilterFromItem(source, type);\n          if (!sourceValue.includes(filterValue)) return true;\n          return false;\n        }\n        if (value.includes(filterValue)) return false;\n        return true;\n      }\n    );\n    return unsatisifiedActiveFilters.length ? 0.13 : 1;\n  };\n\n  return (\n    <div\n      ref={ref}\n      className={`NetworkBubbles NetworkBubbles--${\n        activeFilters.length || searchTerm ? \"is\" : \"is-not\"\n      }-hovering`}\n    >\n      <div className=\"NetworkBubbles__wrapper\">\n        {groups.current && (\n          <>\n            {/* {topLeftDot && (\n              <div\n                className=\"NetworkBubbles__annotation\"\n                style={move(\n                  topLeftDot[\"position\"][0] + topLeftGroup[\"x\"],\n                  topLeftDot[\"position\"][1] + topLeftGroup[\"y\"]\n                )}\n              >\n                <svg\n                  className=\"NetworkBubbles__annotation-line\"\n                  viewBox=\"0 0 1 1\"\n                  preserveAspectRatio=\"none\"\n                >\n                  <path\n                    vectorEffect=\"non-scaling-stroke\"\n                    d=\"M 0 0 C 0 0.5 0.5 1 1 1\"\n                  ></path>\n                </svg>\n                <div className=\"NetworkBubbles__annotation-text\">\n                  Each dot is a Item\n                  <br />\n                  <i>hover to see details</i>\n                </div>\n              </div>\n            )} */}\n            <svg width={dms.width} height={dms.height}>\n              <defs>\n                <linearGradient id={`from-to`}>\n                  {[fromColor, toColor].map((color, i) => (\n                    <stop key={i} stopColor={color} offset={i * 100 + \"%\"} />\n                  ))}\n                </linearGradient>\n\n                {contributionAreaColorCombos.map(({ slug, colors }) => (\n                  <linearGradient key={slug} id={slug}>\n                    {colors.map((color, i) => (\n                      <stop key={i} stopColor={color} offset={i * 100 + \"%\"} />\n                    ))}\n                  </linearGradient>\n                ))}\n\n                <marker\n                  id=\"NetworkBubbles__arrow\"\n                  className=\"NetworkBubbles__arrow\"\n                  viewBox=\"0 0 10 10\"\n                  refX=\"5\"\n                  refY=\"5\"\n                  markerWidth=\"12\"\n                  markerHeight=\"12\"\n                  orient=\"auto-start-reverse\"\n                >\n                  <path d=\"M 0 1 L 6 5 L 0 9 z\" />\n                </marker>\n\n                <filter\n                  id=\"noise\"\n                  x={-dms.width}\n                  y={-dms.height}\n                  // width=\"600%\"\n                  // height=\"600%\"\n                  width={dms.width * 2}\n                  height={dms.height * 2}\n                >\n                  <feTurbulence\n                    baseFrequency=\"0.03 0.03\"\n                    result=\"NOISE\"\n                    numOctaves=\"2\"\n                  ></feTurbulence>\n                  <feDisplacementMap\n                    in=\"SourceGraphic\"\n                    in2=\"NOISE\"\n                    scale=\"13\"\n                    xChannelSelector=\"R\"\n                    yChannelSelector=\"R\"\n                  ></feDisplacementMap>\n                </filter>\n              </defs>\n\n              {groupBubbles.map(({ name, path, top }, i) => (\n                <path\n                  key={name}\n                  className={`NetworkBubbles__cluster`}\n                  style={{ strokeWidth: baseCircleSize * 7 }}\n                  filter=\"url(#noise)\"\n                  d={path}\n                ></path>\n              ))}\n\n              {links.current.map((link, i) => (\n                <g key={i}>\n                  <path\n                    className={`NetworkBubbles__link NetworkBubbles__link--${link[\"type\"]}`}\n                    d={getLinkPath(link)}\n                    markerStart={\n                      link[\"type\"] == \"equal\"\n                        ? null\n                        : \"url(#NetworkBubbles__arrow)\"\n                    }\n                    style={{\n                      opacity: getItemOpacity(link.target, link.source),\n                    }}\n                  ></path>\n                  {link[\"type\"] != \"equal\" && (\n                    <path\n                      className={`NetworkBubbles__link__pulse NetworkBubbles__link__pulse--${link[\"type\"]}`}\n                      d={getLinkPath(link)}\n                      style={{\n                        opacity: getItemOpacity(link.target, link.source),\n                      }}\n                    ></path>\n                  )}\n                </g>\n              ))}\n\n              {groups.current.map((item) => (\n                <g\n                  key={item[\"id\"]}\n                  className={`NetworkBubbles__group-g`}\n                  style={{\n                    ...move(item[\"x\"], item[\"y\"]),\n                    opacity: getItemOpacity(item),\n                  }}\n                  onClick={() =>\n                    groupType == \"Actors\"\n                      ? setFocusedNodeId(item[\"id\"])\n                      : onFocusItem(item[\"id\"])\n                  }\n                >\n                  <g\n                    onMouseEnter={() => updateTooltip(item)}\n                    onMouseLeave={() =>\n                      groupType == \"Actors\"\n                        ? updateTooltip(focusedNode)\n                        : updateTooltip(null)\n                    }\n                  >\n                    <circle\n                      fill={\n                        groupType == \"Actors\" &&\n                        item[\"id\"] == (focusedNode || {})[\"id\"]\n                          ? \"white\"\n                          : \"transparent\"\n                      }\n                      r={item[\"r\"] * 1.6}\n                    />\n                    <g\n                      style={{\n                        // fill: typeColors[item[\"type\"]],\n                        fill: item[\"color\"],\n                        transform: `scale(${item[\"r\"] / 50})`,\n                      }}\n                    >\n                      {item[\"type\"] == \"Actors\" &&\n                      item[\"Person or Org\"] == \"Organization\"\n                        ? typeShapes[\"Organizations\"]\n                        : typeShapes[item[\"type\"]]}\n                    </g>\n                  </g>\n\n                  {groupType == item[\"type\"] && (\n                    <CircleText r={item[\"r\"] + 6}>\n                      {truncate(item[\"label\"], Math.floor(item[\"r\"] * 0.36))}\n                    </CircleText>\n                  )}\n                </g>\n              ))}\n\n              {groupBubbles.map(({ name, path, top }, i) => (\n                <text\n                  key={name}\n                  style={move(...top)}\n                  className={`NetworkBubbles__cluster-name`}\n                >\n                  {name}\n                </text>\n              ))}\n            </svg>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default NetworkBubbles;\n\nfunction useForceUpdate() {\n  const [, setValue] = useState(0); // integer state\n  return () => setValue((value) => ++value); // update the state to force render\n}\n\nconst getFilterFromItem = (d, filter) => {\n  const value = d[filter];\n  if (!value) return [];\n  if (typeof value == \"object\") return value;\n  return [value];\n};\n","import React, { useMemo } from \"react\";\n\nimport Icon from \"./../Icon/Icon\";\n\nimport { fieldLabels, contributionAreaColors } from \"./../../constants\";\nimport { flatten, toTitleCase } from \"./../../utils\";\n\nimport \"./NetworkFilters.css\";\n\nconst NetworkFilters = ({ data, filters, activeFilters, onUpdateFilters }) => {\n  const parsedFilters = useMemo(\n    () =>\n      filters.map((filter) => {\n        const values = [\n          ...new Set(flatten(data.map((d) => getFilterFromItem(d, filter)))),\n        ];\n        return { name: filter, values };\n      }),\n    [data, filters]\n  );\n\n  const onClickItem = (type, value) => {\n    const activeFilterOfType = activeFilters.find(\n      (filter) => filter[\"type\"] == type\n    );\n    if (!activeFilterOfType) {\n      onUpdateFilters([...activeFilters, { type, value }]);\n      return;\n    }\n    const otherActiveFilters = activeFilters.filter(\n      (filter) => filter.type != type\n    );\n\n    const isActiveFilter = activeFilterOfType[\"value\"] == value;\n    const newFilters = isActiveFilter\n      ? otherActiveFilters\n      : [...otherActiveFilters, { type, value }];\n\n    onUpdateFilters(newFilters);\n  };\n  // const onMouseLeaveItem = (type, item) => {\n  //   onUpdateFilters(type, item);\n  // };\n\n  const getFilterState = (type, value) => {\n    const activeFilterOfType = activeFilters.find(\n      (filter) => filter[\"type\"] == type\n    );\n    if (!activeFilterOfType) return \"normal\";\n    return activeFilterOfType[\"value\"] == value ? \"selected\" : \"unselected\";\n  };\n\n  return (\n    <div className=\"NetworkFilters\">\n      {parsedFilters.map(({ name, values }) => (\n        <div className=\"NetworkFilters__filter\" key={name}>\n          <h6>{fieldLabels[name] || name}</h6>\n          {values.map((value) => {\n            const state = getFilterState(name, value);\n            return (\n              <div\n                className={`NetworkFilters__filter__item NetworkFilters__filter__item--is-${state}`}\n                key={value}\n                onClick={() => onClickItem(name, value)}\n                style={\n                  name == \"mainContributionArea\"\n                    ? { \"--override-color\": contributionAreaColors[value] }\n                    : {}\n                }\n                // onMouseLeave={() => onMouseLeaveItem(name, null)}\n              >\n                {toTitleCase(value)}\n                {state == \"selected\" && <Icon name=\"x\" size=\"s\" />}\n              </div>\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default NetworkFilters;\n\nconst getFilterFromItem = (d, filter) => {\n  const value = d[filter];\n  if (!value) return [];\n  if (typeof value == \"object\") return value;\n  return [value];\n};\n","import React, { useMemo, useState } from \"react\";\n\nimport Icon from \"./../Icon/Icon\";\n\nimport { fieldLabels } from \"./../../constants\";\nimport { flatten, toTitleCase } from \"./../../utils\";\n\nimport \"./NetworkList.css\";\n\nconst NetworkList = ({ data, filters, focusedNode, setFocusedNodeId }) => {\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const isItemActive = (item) => {\n    if (!activeFilters.length) return true;\n\n    const unsatisifiedActiveFilters = activeFilters.filter(\n      ({ type, value: filterValue }) => {\n        const value = getFilterFromItem(item, type);\n        if (!value.length) return true;\n        if (value.includes(filterValue)) return false;\n        return true;\n      }\n    );\n    return !unsatisifiedActiveFilters.length;\n  };\n\n  const parsedFilters = useMemo(\n    () =>\n      filters.map((filter) => {\n        const values = [\n          ...new Set(flatten(data.map((d) => getFilterFromItem(d, filter)))),\n        ];\n        return { name: filter, values };\n      }),\n    [data, filters]\n  );\n\n  const onSetFilter = (type, value) => {\n    const otherActiveFilters = activeFilters.filter(\n      (filter) => filter.type != type\n    );\n    if (!value) {\n      setActiveFilters(otherActiveFilters);\n    } else {\n      setActiveFilters([...otherActiveFilters, { type, value }]);\n    }\n  };\n\n  const getFilterValue = (type) => {\n    const activeFilterOfType = activeFilters.find(\n      (filter) => filter[\"type\"] == type\n    );\n    return activeFilterOfType ? activeFilterOfType[\"value\"] : null;\n  };\n\n  const [actors, organizations] = useMemo(\n    () => [\n      data\n        .filter((d) => d[\"Person or Org\"] != \"Organization\" && isItemActive(d))\n        .sort((a, b) => (b.label > a.label ? -1 : 1)),\n      data\n        .filter((d) => d[\"Person or Org\"] == \"Organization\" && isItemActive(d))\n        .sort((a, b) => (b.label > a.label ? -1 : 1)),\n    ],\n    [data, activeFilters]\n  );\n\n  return (\n    <div className=\"NetworkList\">\n      {parsedFilters.map(({ name, values }) => (\n        <div className=\"NetworkList__filter\" key={name}>\n          <select\n            className=\"NetworkList__select\"\n            value={getFilterValue(name) || \"\"}\n            onChange={(e) => {\n              onSetFilter(name, e.target.value);\n            }}\n          >\n            <option value=\"\">\n              - Filter list by {fieldLabels[name] || name} -\n            </option>\n            {values.map((value) => {\n              return (\n                <option key={value} value={value}>\n                  {toTitleCase(value)}\n                </option>\n              );\n            })}\n          </select>\n          {getFilterValue(name) && (\n            <button\n              className=\"NetworkList__clear\"\n              onClick={() => onSetFilter(name, null)}\n            >\n              <Icon name=\"x\" size=\"s\" />\n            </button>\n          )}\n        </div>\n      ))}\n\n      <div className=\"NetworkList__filter\">\n        <h6>Individuals</h6>\n        {actors.map((d) => {\n          const isSelected = d.id == (focusedNode || {}).id;\n          return (\n            <div\n              className={`NetworkList__filter__item NetworkList__filter__item--is-${\n                isSelected ? \"selected\" : \"unselected\"\n              }`}\n              key={d.id}\n              onClick={() => setFocusedNodeId(d[\"id\"])}\n              // onMouseLeave={() => onMouseLeaveItem(name, null)}\n            >\n              {d.label}\n            </div>\n          );\n        })}\n\n        <br />\n        <h6>Organizations</h6>\n        {organizations.map((d) => {\n          const isSelected = d.id == (focusedNode || {}).id;\n          return (\n            <div\n              className={`NetworkList__filter__item NetworkList__filter__item--is-${\n                isSelected ? \"selected\" : \"unselected\"\n              }`}\n              key={d.id}\n              onClick={() => setFocusedNodeId(d[\"id\"])}\n              // onMouseLeave={() => onMouseLeaveItem(name, null)}\n            >\n              {d.label}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\nexport default NetworkList;\n\nconst getFilterFromItem = (d, filter) => {\n  const value = d[filter];\n  if (!value) return [];\n  if (typeof value == \"object\") return value;\n  return [value];\n};\n","import React from \"react\";\nimport { format } from \"d3\";\n\nimport { move, truncate } from \"./../../utils\";\nimport { typeColors } from \"./../../constants\";\n\nimport \"./NetworkTooltip.css\";\n\nconst NetworkTooltip = ({ data, groupType, isFocused, onFocus }) => {\n  return (\n    <div className={[\"NetworkTooltip\"].join(\" \")}>\n      <div className=\"NetworkTooltip__name\">\n        {!!data[\"year\"] && (\n          <div className=\"NetworkTooltip__year\">{data[\"year\"]}</div>\n        )}\n        {data[\"label\"]}\n      </div>\n      {/* <div className=\"NetworkTooltip__text\">{data[\"type\"].slice(0, -1)}</div> */}\n      {data[\"Amount\"] && (\n        <div className=\"NetworkTooltip__text\">\n          ${format(\",.0f\")(data[\"Amount\"])}\n        </div>\n      )}\n      {data[\"mainContributionArea\"] && (\n        <div className=\"NetworkTooltip__text\">\n          {data[\"mainContributionArea\"].join(\" & \")}\n        </div>\n      )}\n      {data[\"Entity Type\"] && (\n        <div className=\"NetworkTooltip__text\">\n          {data[\"Entity Type\"].join(\", \")}\n        </div>\n      )}\n      {/* {data[\"Focus\"] && (\n        <div className=\"NetworkTooltip__text\">{data[\"Focus\"]}</div>\n      )} */}\n      {/* <div className=\"NetworkTooltip__info \">\n        <span className={`NetworkTooltip__info actor actor--${data[\"actor\"]}`}>\n          {data[\"actors\"].join(\", \").replace(new RegExp(\" -- \", \"g\"), \", \")}\n        </span>\n      </div>\n      <div className={`NetworkTooltip__info`}>\n        {(data[\"Mission Type\"] || [])\n          .map((d) => d.toLowerCase().trim())\n          .map((type) => (\n            <span\n              key={type}\n              className=\"NetworkTooltip__type-name\"\n              style={{ color: typeColors[type] }}\n            >\n              {type}\n            </span>\n          ))}\n      </div>\n       */}\n      {/* <svg className=\"NetworkTooltip__arrow\" viewBox=\"0 0 3 2\">\n        <path d=\"M 1 0 L 3 0 L 0 2 Z\" fill=\"white\"></path>\n      </svg> */}\n\n      {groupType == \"Actors\" ? (\n        isFocused ? (\n          <button\n            className=\"NetworkTooltip__more\"\n            onClick={() => onFocus(data[\"id\"])}\n          >\n            More info\n          </button>\n        ) : (\n          <div className=\"NetworkTooltip__note\">Click to center</div>\n        )\n      ) : (\n        <div className=\"NetworkTooltip__note\">Click for more info</div>\n      )}\n    </div>\n  );\n};\nexport default NetworkTooltip;\n","import React from \"react\";\n\nimport { statusColors } from \"./../../constants\";\n\nimport \"./StatusPill.css\";\n\nconst StatusPill = ({ status }) => {\n  return (\n    <div\n      className=\"StatusPill\"\n      style={{\n        \"--status-color\": statusColors[status],\n        background: `${statusColors[status]}33`,\n      }}\n    >\n      {status}\n    </div>\n  );\n};\nexport default StatusPill;\n","import React, { useMemo } from \"react\";\nimport { format } from \"d3-format\";\n\nimport StatusPill from \"./StatusPill\";\nimport Icon from \"./../Icon/Icon\";\n\nimport \"./NetworkModal.css\";\n\nconst NetworkModal = ({ info = {}, onClose }) => {\n  return (\n    <>\n      <div className=\"NetworkModal__background\" onClick={onClose}></div>\n      <div className=\"NetworkModal\">\n        <div className=\"NetworkModal__content\">\n          <div className=\"NetworkModal__close\" onClick={onClose}>\n            <Icon size=\"s\" name=\"x\" />\n          </div>\n\n          <div className=\"NetworkModal__name\">\n            {info[\"label\"]}\n            {/* <div className=\"NetworkModal__year\">{info[\"year\"]}</div> */}\n          </div>\n\n          <div className=\"NetworkModal__status\">\n            {!!info[\"Status\"] && <StatusPill status={info[\"Status\"][0]} />}\n          </div>\n\n          {info[\"Link to More Info on Entity (bio or overview page)\"] && (\n            <a\n              href={info[\"Link to More Info on Entity (bio or overview page)\"]}\n              target=\"_blank\"\n              rel=\"noopener\"\n              className=\"NetworkModal__link\"\n            >\n              More info\n            </a>\n          )}\n          {info[\"URL for Context\"] && (\n            <a\n              href={info[\"URL for Context\"]}\n              target=\"_blank\"\n              rel=\"noopener\"\n              className=\"NetworkModal__link\"\n            >\n              More info\n            </a>\n          )}\n          {info[\"Big/Latest News\"] && (\n            <a\n              href={info[\"Big/Latest News\"]}\n              target=\"_blank\"\n              rel=\"noopener\"\n              className=\"NetworkModal__link\"\n            >\n              Latest news\n            </a>\n          )}\n\n          {info[\"Amount\"] && (\n            <div className=\"NetworkModal__info\">\n              <div className=\"NetworkModal__label\">Amount:</div>$\n              {format(\",.0f\")(info[\"Amount\"])}\n            </div>\n          )}\n          {[\n            \"Focus\",\n            \"Date\",\n            \"Topical Contribution Area\",\n            \"Rate-Limiting Feature\",\n            \"Entity Type\",\n            \"Year founded / Born\",\n            \"Funded by\",\n            \"Enacted/Undertaken By\",\n            \"Number of People Involved (to 3 sig digits)\",\n            \"Directly Associated Orgs (e.g., employment/parent org):\",\n            \"Partners With\",\n            \"Enacting/Undertaking XYZ Interventions\",\n            \"Funding XYZ Interventions\",\n            \"Made XYZ Investment(s)\",\n            \"Received XYZ Investment(s)\",\n            // \"Amount\",\n            \"Source\",\n            \"Recipient\",\n            \"Directly Associated Orgs (e.g., employment/parent org)\",\n          ].map(\n            (key) =>\n              info[key] && (\n                <div className=\"NetworkModal__info\">\n                  <div className=\"NetworkModal__label\">\n                    {key.split(\" (\")[0]}:\n                  </div>\n                  {Array.isArray(info[key])\n                    ? info[key].map((d) => <div>{d}</div>)\n                    : info[key]}\n                </div>\n              )\n          )}\n          {/* {info[\"mainContributionArea\"] && (\n            <div className=\"NetworkModal__info\">\n              {info[\"mainContributionArea\"].join(\" & \")}\n            </div>\n          )} */}\n          {info[\"Intervention(s) being addressed:\"] &&\n            !!info[\"Intervention(s) being addressed:\"].filter((d) => d)\n              .length && (\n              <div className=\"NetworkModal__info\">\n                <div className=\"NetworkModal__label\">\n                  Interventions being addressed:\n                </div>\n\n                {info[\"Intervention(s) being addressed:\"].join(\", \")}\n              </div>\n            )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default NetworkModal;\n","import { max } from \"d3-array\";\nimport { scaleLog } from \"d3-scale\";\n\nimport { fromPairs } from \"./utils\";\nimport { data } from \"./constants\";\n\nconst amountSizeScale = scaleLog()\n  .domain([1, max(data[\"Investments\"], (d) => d[\"Amount\"])])\n  .range([0.01, 1.2])\n  .clamp(true);\n\nexport const groupOptions = [\n  {\n    label: \"Interventions\",\n    id: \"Interventions\",\n    pluralNoun: \"interventions\",\n    key: \"Interventions\",\n    accessor: (d) => d[\"Interventions\"],\n    clusterBy: \"mainContributionArea\",\n    getClusterName: (d) => d[\"mainContributionArea\"],\n    // getColor: (d) => contributionAreaColors[d[\"mainContributionArea\"]],\n    filters: [\n      \"mainContributionArea\",\n      \"Rate-Limiting Feature\",\n      \"Type (approach)\",\n    ],\n    links: [\n      [\"Associated Investments\", \"Investments\", \"equal\"],\n      [\"Associated Regulations\", \"Regulations\", \"equal\"],\n      [\"Enacted/Undertaken By\", \"Actors\", \"equal\"],\n      [\"Funded by\", \"Actors\", \"equal\"],\n    ],\n  },\n  {\n    label: \"Investments\",\n    id: \"Investments\",\n    pluralNoun: \"investments\",\n    key: \"Investments\",\n    accessor: (d) => d[\"Investments\"],\n    clusterBy: \"mainContributionArea\",\n    getClusterName: (d) => d[\"mainContributionArea\"],\n    // getColor: (d) => contributionAreaColors[d[\"mainContributionArea\"]],\n    getSize: (d) => amountSizeScale(d[\"Amount\"]) || 0.8,\n    filters: [\"mainContributionArea\"],\n\n    links: [\n      [\"Source\", \"Actors\", \"from\"],\n      [\"Recipient\", \"Actors\", \"to\"],\n      [\"Intervention(s) being addressed:\", \"Actors\", \"equal\"],\n    ],\n  },\n  {\n    label: \"Actors\",\n    id: \"Actors\",\n    pluralNoun: \"actors\",\n    key: \"Actors\",\n    accessor: (d) => d[\"Actors\"],\n    // clusterBy: \"Person or Org\",\n    // getClusterName: (d) => {\n    //   return d[\"Person or Org\"];\n    // },\n    // getColor: (d) =>\n    //   ({\n    //     \"Individual Person\": \"var(--accent-3)\",\n    //     Organization: \"var(--accent-2)\",\n    //   }[d[\"Person or Org\"]]),\n    // clusterBy: \"Entity Type\",\n    // getClusterName: (d) => {\n    //   return (d[\"Entity Type\"] || [])[0];\n    // },\n    // getColor: (d) =>\n    //   ({\n    //     \"Individual Person\": \"#89b792\",\n    //     Organization: \"#4d405a\",\n    //   }[d]),\n    getSize: (d) =>\n      d.type != \"Actors\"\n        ? 1.7\n        : d[\"Person or Org\"] == \"Individual Person\"\n        ? 2.1\n        : ([\n            \"Under 10\",\n            \"10-50\",\n            \"50-100\",\n            \"100-500\",\n            \"500-1000\",\n            \"1000+\",\n          ].indexOf(d[\"Number of People Involved (to 3 sig digits)\"]) +\n            8) *\n          0.23,\n    filters: [\n      // \"mainContributionArea\",\n      // \"Enacting/Undertaking XYZ Interventions\",\n      \"Entity Type\",\n      // \"Status\",\n    ],\n\n    links: [\n      [\n        \"Directly Associated Orgs (e.g., employment/parent org):\",\n        \"Actors\",\n        \"equal\",\n      ],\n      [\"Partners With\", \"Actors\", \"equal\"],\n      [\"Enacting/Undertaking XYZ Interventions\", \"Interventions\", \"equal\"],\n      [\"Funding XYZ Interventions\", \"Interventions\", \"to\"],\n      [\"Made XYZ Investment(s)\", \"Investments\", \"to\"],\n      [\"Received XYZ Investment(s)\", \"Investments\", \"from\"],\n    ],\n  },\n  // {\n  //   label: \"Regulations\",\n  //   id: \"Regulations\",\n  //   pluralNoun: \"regulations\",\n  //   key: \"Regulations\",\n  //   accessor: (d) => d[\"Regulations\"],\n  //   links: [[\"Impacts the Following Interventions\", \"Interventions\", \"equal\"]],\n  // },\n];\nexport const groupOptionsById = fromPairs(\n  groupOptions.map((group) => [group[\"id\"], group])\n);\n","import React, { useState, useCallback, useMemo } from \"react\";\n\nimport Icon from \"./../Icon/Icon\";\nimport NetworkSearch from \"./NetworkSearch\";\nimport NetworkBubbles from \"./NetworkBubbles\";\nimport NetworkFilters from \"./NetworkFilters\";\nimport NetworkList from \"./NetworkList\";\nimport NetworkTooltip from \"./NetworkTooltip\";\nimport NetworkModal from \"./NetworkModal\";\n\nimport { typeShapes } from \"./../../constants\";\nimport { groupOptions, groupOptionsById } from \"./../../group-options\";\n\nimport \"./Network.css\";\n\nconst Network = ({\n  data,\n  groupType,\n  focusedItem,\n  searchTerm,\n  onChangeState,\n  focusedNode,\n}) => {\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [hoveredItem, onHoverItem] = useState(null);\n  const [areFiltersShowing, setAreFiltersShowing] = useState(false);\n  const [isAboutShowing, setIsAboutShowing] = useState(false);\n\n  const groupMeta = groupOptionsById[groupType];\n\n  const onFocusItem = useCallback((newItem) => {\n    onChangeState(\"item\", newItem);\n  });\n\n  const setFocusedNodeId = useCallback((newItem) => {\n    onChangeState(\"focused\", newItem);\n  });\n\n  const setSearchTerm = (newTerm) => {\n    onChangeState(\"search\", newTerm);\n  };\n\n  const onCloseFocusedItem = useCallback(() => {\n    onFocusItem(null);\n  }, []);\n\n  const relationships = {\n    Interventions: \"associated investments, funders, and actors\",\n    Investments: \"source, recipient, and addressed interventions\",\n    Actors:\n      \"partners, associated organizations, funded & undertaken interventions, and made & received investments\",\n  };\n  const directions = {\n    Interventions:\n      \"Hover or filter to isolate an intervention's primary connections, or click to see more details about an intervention.\",\n    Investments:\n      \"Hover or filter to isolate an investment's primary connections, or click to see more details about an investment.\",\n    Actors: \"Select an actor to see its primary and secondary connections.\",\n  };\n\n  const about = useMemo(() => {\n    return `These are the current ${groupType}, linked to their ${relationships[groupType]}. <em>${directions[groupType]}</em>`;\n  }, [groupType]);\n\n  return (\n    <div className=\"Network__wrapper\">\n      <div className=\"Network__main\">\n        <div\n          className={`Network__sidebar Network__sidebar--filters-${\n            areFiltersShowing ? \"showing\" : \"hidden\"\n          } Network__sidebar--about-${isAboutShowing ? \"showing\" : \"hidden\"}`}\n        >\n          <div className=\"Network__sidebar__top\">\n            <h1 className=\"Network__title\">The Climate Change Industry</h1>\n            <div\n              className=\"Network__info\"\n              dangerouslySetInnerHTML={{ __html: about }}\n            />\n            <div className=\"Network__type\">\n              <div className=\"Network__toggle\">\n                {groupOptions.map(({ label, id }) => (\n                  <button\n                    key={id}\n                    className={`Network__toggle__button Network__toggle__button--is-${\n                      groupType == id ? \"selected\" : \"unselected\"\n                    }`}\n                    onClick={() => {\n                      setActiveFilters([]);\n                      setSearchTerm(null);\n                      onHoverItem(null);\n                      onChangeState(\"group\", id);\n                      setFocusedNodeId(null);\n                    }}\n                  >\n                    <svg viewBox=\"-75 -75 150 150\">{typeShapes[id]}</svg>\n                    {label}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"Network__about\">\n            <h1>The Climate Change Industry</h1>\n            <div dangerouslySetInnerHTML={{ __html: about }} />\n            <button\n              className=\"Network__sidebar__close\"\n              onClick={() => setIsAboutShowing(false)}\n            >\n              <Icon name=\"x\" size=\"s\" />\n            </button>\n          </div>\n\n          <div className=\"Network__mobile-buttons\">\n            <button\n              className=\"Network__button Network__mobile-button\"\n              onClick={() => setAreFiltersShowing(true)}\n            >\n              <Icon name=\"controls\" />\n            </button>\n            <button\n              className=\"Network__button Network__mobile-button\"\n              onClick={() => setIsAboutShowing(true)}\n            >\n              <Icon name=\"info\" />\n            </button>\n          </div>\n\n          <h6 className=\"Network__sidebar__bottom-label\">\n            {groupType == \"Actors\" ? \"Filter by actor\" : \"Filter by\"}\n          </h6>\n\n          <div className=\"Network__sidebar__bottom\">\n            <button\n              className=\"Network__sidebar__close\"\n              onClick={() => setAreFiltersShowing(false)}\n            >\n              <Icon name=\"x\" size=\"s\" />\n            </button>\n            {groupType == \"Actors\" ? (\n              <div className=\"Network__sidebar__section Network__filters\">\n                <NetworkList\n                  data={data[groupType]}\n                  filters={groupMeta[\"filters\"]}\n                  {...{ focusedNode, setFocusedNodeId }}\n                />\n              </div>\n            ) : (\n              <>\n                <div className=\"Network__sidebar__section Network__search\">\n                  <NetworkSearch {...{ data, searchTerm, setSearchTerm }} />\n                </div>\n                <div className=\"Network__sidebar__section Network__filters\">\n                  <NetworkFilters\n                    filters={groupMeta[\"filters\"]}\n                    {...{ activeFilters }}\n                    data={data[groupType]}\n                    onUpdateFilters={setActiveFilters}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        <div className=\"Network__bubbles\">\n          <NetworkBubbles\n            {...{\n              data,\n              groupType,\n              groupMeta,\n              activeFilters,\n              focusedItem,\n              onFocusItem,\n              hoveredItem,\n              onHoverItem,\n              focusedNode,\n              setFocusedNodeId,\n            }}\n            searchTerm={searchTerm.toLowerCase()}\n          />\n        </div>\n      </div>\n\n      {!!hoveredItem && (\n        <NetworkTooltip\n          data={hoveredItem}\n          groupType={groupType}\n          isFocused={hoveredItem[\"id\"] == focusedNode[\"id\"]}\n          onFocus={onFocusItem}\n        />\n      )}\n\n      {focusedItem && (\n        <NetworkModal info={focusedItem} onClose={onCloseFocusedItem} />\n      )}\n    </div>\n  );\n};\n\nexport default Network;\n","import React, { useEffect, useMemo, useState } from \"react\";\n\nimport { data } from \"./../constants\";\nimport { useQueryParams } from \"./../utils\";\nimport Network from \"./Network/Network\";\n\nimport \"./App.css\";\nconsole.log(data);\n\nfunction App() {\n  const [params, updateParams] = useQueryParams();\n\n  const onChangeState = (type, newState) => {\n    updateParams({ [type]: newState });\n  };\n\n  const viz = params[\"viz\"] || \"network\";\n  const groupType = params[\"group\"] || \"Interventions\";\n  const searchTerm = params[\"search\"] || \"\";\n  const isEmbed = !!params[\"embed\"];\n\n  const focusedItem = useMemo(() => {\n    if (!params[\"item\"]) return null;\n    const itemGroupType = params[\"item\"].split(\"--\")[0];\n    const matchingItem = (data[itemGroupType || groupType] || []).find(\n      (d) => d[\"id\"] === params[\"item\"]\n    );\n    if (!matchingItem) return null;\n    return matchingItem;\n  }, [params[\"item\"], data]);\n\n  const focusedNode = useMemo(() => {\n    if (!params[\"focused\"] || typeof params[\"focused\"] != \"string\") return null;\n    const itemGroupType = params[\"focused\"].split(\"--\")[0];\n    const matchingItem = (data[itemGroupType || groupType] || []).find(\n      (d) => d[\"id\"] === params[\"focused\"]\n    );\n    if (!matchingItem) return null;\n    return matchingItem;\n  }, [params[\"focused\"], data]);\n\n  return (\n    <div className={`App App--is-${isEmbed ? \"embed\" : \"normal\"}`}>\n      {viz === \"network\" ? (\n        <Network\n          {...{\n            data,\n            groupType,\n            focusedItem,\n            focusedNode,\n            searchTerm,\n            onChangeState,\n          }}\n        />\n      ) : // <Objectives\n      //   data={data[\"Objectives\"]}\n      //   investigations={data[\"Investigations\"]}\n      //   instruments={data[\"Instruments/Payloads\"]}\n      //   missions={data[\"Missions\"]}\n      //   focusedObjective={focusedObjective}\n      //   onChangeState={onChangeState}\n      // />\n      null}\n      {/* <SvgPatterns /> */}\n    </div>\n  );\n}\n\nexport default App;\n\n// const SvgPatterns = () => (\n//   <svg width=\"0\" height=\"0\">\n//     <defs>\n//       <pattern\n//         id=\"stripes\"\n//         patternUnits=\"userSpaceOnUse\"\n//         width=\"7\"\n//         height=\"7\"\n//         patternTransform=\"rotate(45)\"\n//       >\n//         <line y2=\"7\" stroke=\"#fff\" strokeWidth=\"5\"></line>\n//       </pattern>\n//       <pattern\n//         id=\"x\"\n//         patternContentUnits=\"objectBoundingBox\"\n//         width=\"100%\"\n//         height=\"100%\"\n//       >\n//         <line\n//           style={{ strokeLinecap: \"round\" }}\n//           x1=\"0.33\"\n//           x2=\"0.67\"\n//           y1=\"0.33\"\n//           y2=\"0.67\"\n//           stroke=\"#fff\"\n//           strokeWidth=\"0.13\"\n//         ></line>\n//         <line\n//           style={{ strokeLinecap: \"round\" }}\n//           x1=\"0.67\"\n//           x2=\"0.33\"\n//           y1=\"0.33\"\n//           y2=\"0.67\"\n//           stroke=\"#fff\"\n//           strokeWidth=\"0.13\"\n//         ></line>\n//       </pattern>\n//     </defs>\n//   </svg>\n// );\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}